// Mocks generated by Mockito 5.4.2 from annotations
// in my_app/test/unit_test/appointment_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:my_app/core/failure/failure.dart' as _i6;
import 'package:my_app/features/appointment/domain/entity/appointment_entity.dart'
    as _i7;
import 'package:my_app/features/appointment/domain/repository/appointment_repository.dart'
    as _i2;
import 'package:my_app/features/appointment/domain/use_case/appointment_use_case.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIAppointmentRepository_0 extends _i1.SmartFake
    implements _i2.IAppointmentRepository {
  _FakeIAppointmentRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppointmentUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppointmentUseCase extends _i1.Mock
    implements _i4.AppointmentUseCase {
  @override
  _i2.IAppointmentRepository get appointmentRepository => (super.noSuchMethod(
        Invocation.getter(#appointmentRepository),
        returnValue: _FakeIAppointmentRepository_0(
          this,
          Invocation.getter(#appointmentRepository),
        ),
        returnValueForMissingStub: _FakeIAppointmentRepository_0(
          this,
          Invocation.getter(#appointmentRepository),
        ),
      ) as _i2.IAppointmentRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.AppointmentEntity>>>
      getAppointments() => (super.noSuchMethod(
            Invocation.method(
              #getAppointments,
              [],
            ),
            returnValue: _i5.Future<
                    _i3.Either<_i6.Failure, List<_i7.AppointmentEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.AppointmentEntity>>(
              this,
              Invocation.method(
                #getAppointments,
                [],
              ),
            )),
            returnValueForMissingStub: _i5.Future<
                    _i3.Either<_i6.Failure, List<_i7.AppointmentEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.AppointmentEntity>>(
              this,
              Invocation.method(
                #getAppointments,
                [],
              ),
            )),
          ) as _i5
              .Future<_i3.Either<_i6.Failure, List<_i7.AppointmentEntity>>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> addAppointment(
          _i7.AppointmentEntity? appointment) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAppointment,
          [appointment],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #addAppointment,
            [appointment],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
                _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #addAppointment,
            [appointment],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}
